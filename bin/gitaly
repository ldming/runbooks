#!/usr/bin/env bash

set -efo pipefail

usage() {
  cat <<HELP >&2
USAGE:
  glsh gitaly [SUBCOMMAND]

SUBCOMMANDS:
  repository    Manage repositories
HELP
}

usage_repository() {
  cat <<HELP >&2
USAGE:
  glsh gitaly repository [SUBCOMMAND]

SUBCOMMANDS:
  move    Move a git Repository to another Gitaly file node.
HELP
}

usage_move_repository() {
  cat <<HELP >&2
USAGE:
  glsh gitaly repository move [gstg|gprd] [PROJECT_ID]

Example:
  glsh gitaly repository move gstg 111
HELP
}

# move_repository schedule a repository storage move for a project, and waits
# until it is finished.
move_repository() {
  GITLAB_API="https://staging.gitlab.com"
  GITLAB_ENV=$3
  GITLAB_PROJECT_ID=$4

  if [[ -z ${GITLAB_ADMIN_PAT:-} ]]; then
    echo >&2 "GITLAB_ADMIN_PAT variable is not defined."
    exit 1
  fi

  if [[ $3 == "gprd" ]]; then
    GITLAB_API="https://gitlab.com"
  fi

  # https://docs.gitlab.com/ee/api/project_repository_storage_moves.html#schedule-a-repository-storage-move-for-a-project
  echo "env=${GITLAB_ENV} project_id=${GITLAB_PROJECT_ID} msg=scheduling repository for a storage move"
  REPOSITORY_MOVE_RESP=$(curl -s --request POST \
    --header "PRIVATE-TOKEN: ${GITLAB_ADMIN_PAT}" \
    --header "Content-Type: application/json" \
    "${GITLAB_API}/api/v4/projects/${GITLAB_PROJECT_ID}/repository_storage_moves")
  REPOSITORY_MOVE_ID=$(jq --argjson resp "${REPOSITORY_MOVE_RESP}" -nr '$resp.id')
  REPOSITORY_MOVE_SRC=$(jq --argjson resp "${REPOSITORY_MOVE_RESP}" -nr '$resp.source_storage_name')
  REPOSITORY_MOVE_DEST=$(jq --argjson resp "${REPOSITORY_MOVE_RESP}" -nr '$resp.destination_storage_name')

  if [[ ${REPOSITORY_MOVE_ID} == "null" ]]; then
    echo >&2 "env=${GITLAB_ENV} project_id=${GITLAB_PROJECT_ID} msg=failed to schedule repository for a storage move"
    echo "${REPOSITORY_MOVE_RESP}"
    exit 1
  fi
  echo "env=${GITLAB_ENV} project_id=${GITLAB_PROJECT_ID} src=${REPOSITORY_MOVE_SRC} dest=${REPOSITORY_MOVE_DEST} msg=schduled repository for a storage move"

  echo "env=${GITLAB_ENV} project_id=${GITLAB_PROJECT_ID} src=${REPOSITORY_MOVE_SRC} dest=${REPOSITORY_MOVE_DEST} msg=waiting for repository move to finish"
  while true; do
    # https://docs.gitlab.com/ee/api/project_repository_storage_moves.html#get-a-single-repository-storage-move-for-a-project
    REPOSITORY_MOVE_STATUS_RESP=$(curl -s \
      --header "PRIVATE-TOKEN: ${GITLAB_ADMIN_PAT}" \
      --header "Content-Type: application/json" \
      "${GITLAB_API}/api/v4/projects/${GITLAB_PROJECT_ID}/repository_storage_moves/${REPOSITORY_MOVE_ID}")
    REPOSITROY_MOVE_STATE=$(jq --argjson resp "${REPOSITORY_MOVE_STATUS_RESP}" -nr '$resp.state')
    echo "env=${GITLAB_ENV} project_id=${GITLAB_PROJECT_ID} src=${REPOSITORY_MOVE_SRC} dest=${REPOSITORY_MOVE_DEST} status=${REPOSITROY_MOVE_STATE} msg=repository storage move status"

    if [[ ${REPOSITROY_MOVE_STATE} == "null" ]]; then
      echo >&2 "env=${GITLAB_ENV} project_id=${GITLAB_PROJECT_ID} msg=failed to get repository storage move status"
      echo "${REPOSITORY_MOVE_STATUS_RESP}"
      exit 1
    fi

    if [[ ${REPOSITROY_MOVE_STATE} == "finished" ]]; then
      break
    fi
    sleep 5
  done
}

case $1 in
repository)
  case $2 in
  move)
    if [[ $# -lt 4 ]]; then
      usage_move_repository
      exit 2
    fi
    move_repository "$@"
    ;;
  *)
    usage_repository
    exit 2
    ;;
  esac

  ;;
*)
  usage
  exit 2
  ;;
esac
